Grading at 10/28/2023:00:54:00.772750
For commit ID aadc1902a391e468e732313d1eef5e2d0d84a334
Grading at Fri Oct 27 08:53:48 PM EDT 2023
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.2: Current test is story-step1 story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.3: Current test is story-step1 story3.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.4: Current test is story-step1 story4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.5: Current test is story-step1 story5.txt
-----------------------------
You considered this a failure case:
Invalid integer
But we did not.

1.6: Current test is story-step1 story6.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.7: Current test is story-step1 none.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.8: Current test is story-step1 
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.2: Current test is story-step2 words1.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.3: Current test is story-step2 words2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==1089249== Memcheck, a memory error detector
==1089249== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1089249== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1089249== Command: ./story-step2 words2.txt
==1089249== Parent PID: 1089248
==1089249== 
==1089249== Invalid read of size 1
==1089249==    at 0x484ED76: __strlen_sse2 (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1089249==    by 0x48DAD30: __vfprintf_internal (vfprintf-internal.c:1517)
==1089249==    by 0x48C479E: printf (printf.c:33)
==1089249==    by 0x10A1EA: printWords (provided.c:49)
==1089249==    by 0x10941A: main (story-step2.c:11)
==1089249==  Address 0x4a903b0 is 0 bytes after a block of size 0 alloc'd
==1089249==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1089249==    by 0x10985E: readWords (rand_story.c:104)
==1089249==    by 0x109D58: readFile (rand_story.c:200)
==1089249==    by 0x10940E: main (story-step2.c:10)
==1089249== 
==1089249== 
==1089249== HEAP SUMMARY:
==1089249==     in use at exit: 0 bytes in 0 blocks
==1089249==   total heap usage: 14 allocs, 14 frees, 8,852 bytes allocated
==1089249== 
==1089249== All heap blocks were freed -- no leaks are possible
==1089249== 
==1089249== For lists of detected and suppressed errors, rerun with: -s
==1089249== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

2.4: Current test is story-step2 words3.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.5: Current test is story-step2 words4.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.6: Current test is story-step2 words5.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.7: Current test is story-step2 words.txt words.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.2: Current test is story-step3 words.txt story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.3: Current test is story-step3 words5 story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.4: Current test is story-step3 words none.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
The code did not compile!

Overall Grade: NO GRADE YET
