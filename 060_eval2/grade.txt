Grading at 10/29/2023:00:16:19.460071
For commit ID cf51c7db1a20405fab2b9fbcb4a112f13ecd4747
Grading at Sat Oct 28 08:15:28 PM EDT 2023
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.2: Current test is story-step1
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.3: Current test is story-step1 story.txt story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.4: Current test is story-step1 story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.5: Current test is story-step1 story3.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.6: Current test is story-step1 story4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

1.7: Current test is story-step1 story5.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.8: Current test is story-step1 story6.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.9: Current test is story-step1 story7.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.10: Current test is story-step1 story8.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.11: Current test is story-step1 story9.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.12: Current test is story-step1 story10.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.13: Current test is story-step1 story11.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.14: Current test is story-step1 story12.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.15: Current test is story-step1 story13.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.16: Current test is story-step1 story14.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.17: Current test is story-step1 story15.txt
-----------------------------
You considered this a failure case:
timeout: the monitored command dumped core
But we did not.

1.18: Current test is story-step1 story16.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.19: Current test is story-step1 none.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.20: Current test is story-step1 
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.2: Current test is story-step2 words1.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.3: Current test is story-step2 words2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.4: Current test is story-step2 words3.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.5: Current test is story-step2 words4.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.6: Current test is story-step2 words5.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.7: Current test is story-step2 words6.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.8: Current test is story-step2 words7.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.9: Current test is story-step2 words8.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

2.10: Current test is story-step2 words9.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.11: Current test is story-step2 words10.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.12: Current test is story-step2 words.txt words.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.2: Current test is story-step3 words.txt story3.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.3: Current test is story-step3 words.txt story4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.4: Current test is story-step3 words.txt story5.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.5: Current test is story-step3 words.txt story6.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.6: Current test is story-step3 words.txt story7.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.7: Current test is story-step3 words.txt story8.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.8: Current test is story-step3 words.txt story9.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.9: Current test is story-step3 words.txt story10.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.10: Current test is story-step3 words.txt story11.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.11: Current test is story-step3 words.txt story12.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.12: Current test is story-step3 words.txt story13.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

3.13: Current test is story-step3 words.txt story14.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.14: Current test is story-step3 words2.txt story2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.15: Current test is story-step3 words4.txt story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.16: Current test is story-step3 words3.txt story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.17: Current test is story-step3 words6.txt story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.18: Current test is story-step3 words7.txt story2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.19: Current test is story-step3 words10.txt story2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.20: Current test is story-step3 words5 story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.21: Current test is story-step3 words none.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3 story-step4 story-step1.o story-step2.o story-step3.o story-step4.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step4.c
gcc -o story-step4 story-step4.o rand_story.o provided.o
rm story-step4.o
The code compiled (good)
Executable story-step4 exists (good)
Now running YOUR tests for step 4

4.1: Current test is story-step4 words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

4.2: Current test is story-step4 -n words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==1526691== Memcheck, a memory error detector
==1526691== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1526691== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1526691== Command: ./story-step4 -n words.txt story2.txt
==1526691== Parent PID: 1526690
==1526691== 
==1526691== 
==1526691== HEAP SUMMARY:
==1526691==     in use at exit: 28 bytes in 4 blocks
==1526691==   total heap usage: 255 allocs, 251 frees, 20,829 bytes allocated
==1526691== 
==1526691== 28 bytes in 4 blocks are definitely lost in loss record 1 of 1
==1526691==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1526691==    by 0x109F17: readWords (rand_story.c:201)
==1526691==    by 0x10A351: readFile (rand_story.c:273)
==1526691==    by 0x1094C2: main (story-step4.c:28)
==1526691== 
==1526691== LEAK SUMMARY:
==1526691==    definitely lost: 28 bytes in 4 blocks
==1526691==    indirectly lost: 0 bytes in 0 blocks
==1526691==      possibly lost: 0 bytes in 0 blocks
==1526691==    still reachable: 0 bytes in 0 blocks
==1526691==         suppressed: 0 bytes in 0 blocks
==1526691== 
==1526691== For lists of detected and suppressed errors, rerun with: -s
==1526691== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.3: Current test is story-step4 words.txt words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

4.4: Current test is story-step4 -n words.txt story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==1526738== Memcheck, a memory error detector
==1526738== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1526738== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1526738== Command: ./story-step4 -n words.txt story2.txt
==1526738== Parent PID: 1526737
==1526738== 
==1526738== 
==1526738== HEAP SUMMARY:
==1526738==     in use at exit: 28 bytes in 4 blocks
==1526738==   total heap usage: 255 allocs, 251 frees, 20,829 bytes allocated
==1526738== 
==1526738== 28 bytes in 4 blocks are definitely lost in loss record 1 of 1
==1526738==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1526738==    by 0x109F17: readWords (rand_story.c:201)
==1526738==    by 0x10A351: readFile (rand_story.c:273)
==1526738==    by 0x1094C2: main (story-step4.c:28)
==1526738== 
==1526738== LEAK SUMMARY:
==1526738==    definitely lost: 28 bytes in 4 blocks
==1526738==    indirectly lost: 0 bytes in 0 blocks
==1526738==      possibly lost: 0 bytes in 0 blocks
==1526738==    still reachable: 0 bytes in 0 blocks
==1526738==         suppressed: 0 bytes in 0 blocks
==1526738== 
==1526738== For lists of detected and suppressed errors, rerun with: -s
==1526738== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.5: Current test is story-step4 -n words.txt story3.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==1526759== Memcheck, a memory error detector
==1526759== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1526759== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1526759== Command: ./story-step4 -n words.txt story3.txt
==1526759== Parent PID: 1526758
==1526759== 
==1526759== 
==1526759== HEAP SUMMARY:
==1526759==     in use at exit: 14 bytes in 2 blocks
==1526759==   total heap usage: 191 allocs, 189 frees, 16,231 bytes allocated
==1526759== 
==1526759== 14 bytes in 2 blocks are definitely lost in loss record 1 of 1
==1526759==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1526759==    by 0x109F17: readWords (rand_story.c:201)
==1526759==    by 0x10A351: readFile (rand_story.c:273)
==1526759==    by 0x1094C2: main (story-step4.c:28)
==1526759== 
==1526759== LEAK SUMMARY:
==1526759==    definitely lost: 14 bytes in 2 blocks
==1526759==    indirectly lost: 0 bytes in 0 blocks
==1526759==      possibly lost: 0 bytes in 0 blocks
==1526759==    still reachable: 0 bytes in 0 blocks
==1526759==         suppressed: 0 bytes in 0 blocks
==1526759== 
==1526759== For lists of detected and suppressed errors, rerun with: -s
==1526759== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.6: Current test is story-step4 -n words.txt story4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.7: Current test is story-step4 -n words.txt story5.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.8: Current test is story-step4 -n words.txt story6.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.9: Current test is story-step4 -n words.txt story7.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.10: Current test is story-step4 -n words.txt story8.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.11: Current test is story-step4 -n words.txt story9.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.12: Current test is story-step4 -n words.txt story10.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.13: Current test is story-step4 -n words.txt story11.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.14: Current test is story-step4 -n words.txt story12.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.15: Current test is story-step4 -n words.txt story13.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==1526981== Memcheck, a memory error detector
==1526981== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1526981== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1526981== Command: ./story-step4 -n words.txt story13.txt
==1526981== Parent PID: 1526980
==1526981== 
==1526981== 
==1526981== HEAP SUMMARY:
==1526981==     in use at exit: 14 bytes in 2 blocks
==1526981==   total heap usage: 170 allocs, 168 frees, 15,116 bytes allocated
==1526981== 
==1526981== 14 bytes in 2 blocks are definitely lost in loss record 1 of 1
==1526981==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1526981==    by 0x109F17: readWords (rand_story.c:201)
==1526981==    by 0x10A351: readFile (rand_story.c:273)
==1526981==    by 0x1094C2: main (story-step4.c:28)
==1526981== 
==1526981== LEAK SUMMARY:
==1526981==    definitely lost: 14 bytes in 2 blocks
==1526981==    indirectly lost: 0 bytes in 0 blocks
==1526981==      possibly lost: 0 bytes in 0 blocks
==1526981==    still reachable: 0 bytes in 0 blocks
==1526981==         suppressed: 0 bytes in 0 blocks
==1526981== 
==1526981== For lists of detected and suppressed errors, rerun with: -s
==1526981== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.16: Current test is story-step4 -n words.txt story14.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.17: Current test is story-step4 -n words2.txt story2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.18: Current test is story-step4 -n words4.txt story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.19: Current test is story-step4 -n words3.txt story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.20: Current test is story-step4 -n words6.txt story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.21: Current test is story-step4 -n words7.txt story2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.22: Current test is story-step4 -n words5 story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.23: Current test is story-step4 -n words none.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.24: Current test is story-step4 -n words5.txt story2.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.25: Current test is story-step4 -n
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

4.26: Current test is story-step4 -n words.txt story15.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind reported errors:
==1527197== Memcheck, a memory error detector
==1527197== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1527197== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1527197== Command: ./story-step4 -n words.txt story15.txt
==1527197== Parent PID: 1527196
==1527197== 
==1527197== Invalid read of size 1
==1527197==    at 0x48AB580: ____strtol_l_internal (strtol_l.c:291)
==1527197==    by 0x1095D0: isPositiveInt (rand_story.c:10)
==1527197==    by 0x109B70: parsing (rand_story.c:121)
==1527197==    by 0x109526: main (story-step4.c:38)
==1527197==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1527197== 
==1527197== 
==1527197== Process terminating with default action of signal 11 (SIGSEGV)
==1527197==  Access not within mapped region at address 0x0
==1527197==    at 0x48AB580: ____strtol_l_internal (strtol_l.c:291)
==1527197==    by 0x1095D0: isPositiveInt (rand_story.c:10)
==1527197==    by 0x109B70: parsing (rand_story.c:121)
==1527197==    by 0x109526: main (story-step4.c:38)
==1527197==  If you believe this happened as a result of a stack
==1527197==  overflow in your program's main thread (unlikely but
==1527197==  possible), you can try to increase the size of the
==1527197==  main thread stack using the --main-stacksize= flag.
==1527197==  The main thread stack size used in this run was 8388608.
==1527197== 
==1527197== HEAP SUMMARY:
==1527197==     in use at exit: 4,793 bytes in 17 blocks
==1527197==   total heap usage: 131 allocs, 114 frees, 10,196 bytes allocated
==1527197== 
==1527197== For a detailed leak analysis, rerun with: --leak-check=full
==1527197== 
==1527197== For lists of detected and suppressed errors, rerun with: -s
==1527197== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

4.27: Current test is story-step4 -n words.txt story16.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==1527221== Memcheck, a memory error detector
==1527221== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1527221== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1527221== Command: ./story-step4 -n words.txt story16.txt
==1527221== Parent PID: 1527220
==1527221== 
==1527221== 
==1527221== HEAP SUMMARY:
==1527221==     in use at exit: 28 bytes in 4 blocks
==1527221==   total heap usage: 261 allocs, 257 frees, 21,810 bytes allocated
==1527221== 
==1527221== 28 bytes in 4 blocks are definitely lost in loss record 1 of 1
==1527221==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==1527221==    by 0x109F17: readWords (rand_story.c:201)
==1527221==    by 0x10A351: readFile (rand_story.c:273)
==1527221==    by 0x1094C2: main (story-step4.c:28)
==1527221== 
==1527221== LEAK SUMMARY:
==1527221==    definitely lost: 28 bytes in 4 blocks
==1527221==    indirectly lost: 0 bytes in 0 blocks
==1527221==      possibly lost: 0 bytes in 0 blocks
==1527221==    still reachable: 0 bytes in 0 blocks
==1527221==         suppressed: 0 bytes in 0 blocks
==1527221== 
==1527221== For lists of detected and suppressed errors, rerun with: -s
==1527221== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

You have NOT passed your test cases!
You should go and figure out/understand where thing went wrong
And fix the problem(s) before the deadline

Overall Grade: NO GRADE YET
