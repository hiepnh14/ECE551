Grading at 10/27/2023:20:48:38.948737
For commit ID f59045c71750b6fe125f65f65f81182f194b3f49
Grading at Fri Oct 27 04:48:28 PM EDT 2023
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==985892== Memcheck, a memory error detector
==985892== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==985892== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==985892== Command: ./story-step1 story.txt
==985892== Parent PID: 985891
==985892== 
==985892== Invalid write of size 1
==985892==    at 0x10956A: category (rand_story.c:28)
==985892==    by 0x1095D4: parsing (rand_story.c:42)
==985892==    by 0x109439: main (story-step1.c:14)
==985892==  Address 0x4a90d81 is 0 bytes after a block of size 1 alloc'd
==985892==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==985892==    by 0x10951B: category (rand_story.c:21)
==985892==    by 0x1095D4: parsing (rand_story.c:42)
==985892==    by 0x109439: main (story-step1.c:14)
==985892== 
==985892== 
==985892== HEAP SUMMARY:
==985892==     in use at exit: 0 bytes in 0 blocks
==985892==   total heap usage: 85 allocs, 85 frees, 10,591 bytes allocated
==985892== 
==985892== All heap blocks were freed -- no leaks are possible
==985892== 
==985892== For lists of detected and suppressed errors, rerun with: -s
==985892== ERROR SUMMARY: 20 errors from 1 contexts (suppressed: 0 from 0)

1.2: Current test is story-step1 story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==985913== Memcheck, a memory error detector
==985913== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==985913== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==985913== Command: ./story-step1 story2.txt
==985913== Parent PID: 985912
==985913== 
==985913== Invalid write of size 1
==985913==    at 0x10956A: category (rand_story.c:28)
==985913==    by 0x1095D4: parsing (rand_story.c:42)
==985913==    by 0x109439: main (story-step1.c:14)
==985913==  Address 0x4a90d81 is 0 bytes after a block of size 1 alloc'd
==985913==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==985913==    by 0x10951B: category (rand_story.c:21)
==985913==    by 0x1095D4: parsing (rand_story.c:42)
==985913==    by 0x109439: main (story-step1.c:14)
==985913== 
==985913== 
==985913== HEAP SUMMARY:
==985913==     in use at exit: 0 bytes in 0 blocks
==985913==   total heap usage: 139 allocs, 139 frees, 14,317 bytes allocated
==985913== 
==985913== All heap blocks were freed -- no leaks are possible
==985913== 
==985913== For lists of detected and suppressed errors, rerun with: -s
==985913== ERROR SUMMARY: 29 errors from 1 contexts (suppressed: 0 from 0)

1.3: Current test is story-step1 story3.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==985932== Memcheck, a memory error detector
==985932== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==985932== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==985932== Command: ./story-step1 story3.txt
==985932== Parent PID: 985931
==985932== 
==985932== Invalid write of size 1
==985932==    at 0x10956A: category (rand_story.c:28)
==985932==    by 0x1095D4: parsing (rand_story.c:42)
==985932==    by 0x109439: main (story-step1.c:14)
==985932==  Address 0x4a908a1 is 0 bytes after a block of size 1 alloc'd
==985932==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==985932==    by 0x10951B: category (rand_story.c:21)
==985932==    by 0x1095D4: parsing (rand_story.c:42)
==985932==    by 0x109439: main (story-step1.c:14)
==985932== 
==985932== 
==985932== HEAP SUMMARY:
==985932==     in use at exit: 0 bytes in 0 blocks
==985932==   total heap usage: 80 allocs, 80 frees, 10,637 bytes allocated
==985932== 
==985932== All heap blocks were freed -- no leaks are possible
==985932== 
==985932== For lists of detected and suppressed errors, rerun with: -s
==985932== ERROR SUMMARY: 15 errors from 1 contexts (suppressed: 0 from 0)

1.4: Current test is story-step1 story4.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind reported errors:
==985950== Memcheck, a memory error detector
==985950== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==985950== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==985950== Command: ./story-step1 story4.txt
==985950== Parent PID: 985949
==985950== 
==985950== Invalid write of size 1
==985950==    at 0x10956A: category (rand_story.c:28)
==985950==    by 0x1095D4: parsing (rand_story.c:42)
==985950==    by 0x109439: main (story-step1.c:14)
==985950==  Address 0x4a90de1 is 0 bytes after a block of size 1 alloc'd
==985950==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==985950==    by 0x10951B: category (rand_story.c:21)
==985950==    by 0x1095D4: parsing (rand_story.c:42)
==985950==    by 0x109439: main (story-step1.c:14)
==985950== 
==985950== 
==985950== HEAP SUMMARY:
==985950==     in use at exit: 507 bytes in 3 blocks
==985950==   total heap usage: 38 allocs, 35 frees, 5,102 bytes allocated
==985950== 
==985950== For a detailed leak analysis, rerun with: --leak-check=full
==985950== 
==985950== For lists of detected and suppressed errors, rerun with: -s
==985950== ERROR SUMMARY: 3 errors from 1 contexts (suppressed: 0 from 0)

1.5: Current test is story-step1 story5.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==985968== Memcheck, a memory error detector
==985968== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==985968== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==985968== Command: ./story-step1 story5.txt
==985968== Parent PID: 985967
==985968== 
==985968== Invalid write of size 1
==985968==    at 0x10956A: category (rand_story.c:28)
==985968==    by 0x1095D4: parsing (rand_story.c:42)
==985968==    by 0x109439: main (story-step1.c:14)
==985968==  Address 0x4a905b1 is 0 bytes after a block of size 1 alloc'd
==985968==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==985968==    by 0x10951B: category (rand_story.c:21)
==985968==    by 0x1095D4: parsing (rand_story.c:42)
==985968==    by 0x109439: main (story-step1.c:14)
==985968== 
==985968== 
==985968== HEAP SUMMARY:
==985968==     in use at exit: 0 bytes in 0 blocks
==985968==   total heap usage: 34 allocs, 34 frees, 9,140 bytes allocated
==985968== 
==985968== All heap blocks were freed -- no leaks are possible
==985968== 
==985968== For lists of detected and suppressed errors, rerun with: -s
==985968== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

1.6: Current test is story-step1 story6.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==985986== Memcheck, a memory error detector
==985986== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==985986== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==985986== Command: ./story-step1 story6.txt
==985986== Parent PID: 985985
==985986== 
==985986== Invalid write of size 1
==985986==    at 0x10956A: category (rand_story.c:28)
==985986==    by 0x1095D4: parsing (rand_story.c:42)
==985986==    by 0x109439: main (story-step1.c:14)
==985986==  Address 0x4a90961 is 0 bytes after a block of size 1 alloc'd
==985986==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==985986==    by 0x10951B: category (rand_story.c:21)
==985986==    by 0x1095D4: parsing (rand_story.c:42)
==985986==    by 0x109439: main (story-step1.c:14)
==985986== 
==985986== 
==985986== HEAP SUMMARY:
==985986==     in use at exit: 0 bytes in 0 blocks
==985986==   total heap usage: 36 allocs, 36 frees, 9,152 bytes allocated
==985986== 
==985986== All heap blocks were freed -- no leaks are possible
==985986== 
==985986== For lists of detected and suppressed errors, rerun with: -s
==985986== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)

1.7: Current test is story-step1 none.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

1.8: Current test is story-step1 
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.2: Current test is story-step2 words1.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.3: Current test is story-step2 words2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==986095== Memcheck, a memory error detector
==986095== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==986095== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==986095== Command: ./story-step2 words2.txt
==986095== Parent PID: 986094
==986095== 
==986095== Invalid read of size 1
==986095==    at 0x484ED76: __strlen_sse2 (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==986095==    by 0x48DAD30: __vfprintf_internal (vfprintf-internal.c:1517)
==986095==    by 0x48C479E: printf (printf.c:33)
==986095==    by 0x109FFB: printWords (provided.c:49)
==986095==    by 0x1093DA: main (story-step2.c:11)
==986095==  Address 0x4a903b0 is 0 bytes after a block of size 0 alloc'd
==986095==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==986095==    by 0x10966F: readWords (rand_story.c:72)
==986095==    by 0x109B69: readFile (rand_story.c:168)
==986095==    by 0x1093CE: main (story-step2.c:10)
==986095== 
==986095== 
==986095== HEAP SUMMARY:
==986095==     in use at exit: 0 bytes in 0 blocks
==986095==   total heap usage: 14 allocs, 14 frees, 8,852 bytes allocated
==986095== 
==986095== All heap blocks were freed -- no leaks are possible
==986095== 
==986095== For lists of detected and suppressed errors, rerun with: -s
==986095== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

2.4: Current test is story-step2 words3.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.5: Current test is story-step2 words4.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.6: Current test is story-step2 words5.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.7: Current test is story-step2 words.txt words.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
You considered this a failure case:
Category 1 not found
But we did not.

3.2: Current test is story-step3 words.txt story.txt
-----------------------------
It looks like you got different output from us on that case.
Here is the diff (yours on left, ours on right):

animal:							      <
  dragon						      <
  walrus						      <
place:							      <
  cave							      <
adjective:						      <
  peculiar						      <
  scary							      <
  peaceful						      <
Once upon a time, there was a walrus who lived in a very pecu	Once upon a time, there was a walrus who lived in a very pecu
cave. 								cave. 
Your file did not match the expected output


3.3: Current test is story-step3 words5 story.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

3.4: Current test is story-step3 words none.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
The code did not compile!

Overall Grade: NO GRADE YET
