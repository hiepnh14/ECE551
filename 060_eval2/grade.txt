Grading at 10/27/2023:15:28:02.982354
For commit ID bdb246d9e30b1427ce44f7fbd8bd774d4d22a375
Grading at Fri Oct 27 11:27:57 AM EDT 2023
Doing some basic checking for your submission

Step 1
Checking that story-step1 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step1.c
gcc -o story-step1 story-step1.o rand_story.o provided.o
rm story-step1.o
The code compiled (good)
Executable story-step1 exists (good)
Checking with provided test case story.txt
Your file matched the expected output
Now running YOUR tests for step 1

1.1: Current test is story-step1 story.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==734296== Memcheck, a memory error detector
==734296== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==734296== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==734296== Command: ./story-step1 story.txt
==734296== Parent PID: 734295
==734296== 
==734296== Invalid read of size 1
==734296==    at 0x484ED76: __strlen_sse2 (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==734296==    by 0x109678: parsing (rand_story.c:54)
==734296==    by 0x109459: main (story-step1.c:14)
==734296==  Address 0x4a8f260 is 0 bytes after a block of size 0 alloc'd
==734296==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==734296==    by 0x1095CF: parsing (rand_story.c:36)
==734296==    by 0x109459: main (story-step1.c:14)
==734296== 
==734296== Invalid write of size 1
==734296==    at 0x10958A: category (rand_story.c:28)
==734296==    by 0x1095EE: parsing (rand_story.c:41)
==734296==    by 0x109459: main (story-step1.c:14)
==734296==  Address 0x4a90d71 is 0 bytes after a block of size 1 alloc'd
==734296==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==734296==    by 0x10953B: category (rand_story.c:21)
==734296==    by 0x1095EE: parsing (rand_story.c:41)
==734296==    by 0x109459: main (story-step1.c:14)
==734296== 
==734296== 
==734296== HEAP SUMMARY:
==734296==     in use at exit: 0 bytes in 0 blocks
==734296==   total heap usage: 85 allocs, 85 frees, 10,590 bytes allocated
==734296== 
==734296== All heap blocks were freed -- no leaks are possible
==734296== 
==734296== For lists of detected and suppressed errors, rerun with: -s
==734296== ERROR SUMMARY: 21 errors from 2 contexts (suppressed: 0 from 0)

1.2: Current test is story-step1 story2.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==734330== Memcheck, a memory error detector
==734330== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==734330== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==734330== Command: ./story-step1 story2.txt
==734330== Parent PID: 734329
==734330== 
==734330== Invalid read of size 1
==734330==    at 0x484ED76: __strlen_sse2 (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==734330==    by 0x109678: parsing (rand_story.c:54)
==734330==    by 0x109459: main (story-step1.c:14)
==734330==  Address 0x4a8f260 is 0 bytes after a block of size 0 alloc'd
==734330==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==734330==    by 0x1095CF: parsing (rand_story.c:36)
==734330==    by 0x109459: main (story-step1.c:14)
==734330== 
==734330== Invalid write of size 1
==734330==    at 0x10958A: category (rand_story.c:28)
==734330==    by 0x1095EE: parsing (rand_story.c:41)
==734330==    by 0x109459: main (story-step1.c:14)
==734330==  Address 0x4a90d71 is 0 bytes after a block of size 1 alloc'd
==734330==    at 0x484DCD3: realloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==734330==    by 0x10953B: category (rand_story.c:21)
==734330==    by 0x1095EE: parsing (rand_story.c:41)
==734330==    by 0x109459: main (story-step1.c:14)
==734330== 
==734330== 
==734330== HEAP SUMMARY:
==734330==     in use at exit: 0 bytes in 0 blocks
==734330==   total heap usage: 139 allocs, 139 frees, 14,316 bytes allocated
==734330== 
==734330== All heap blocks were freed -- no leaks are possible
==734330== 
==734330== For lists of detected and suppressed errors, rerun with: -s
==734330== ERROR SUMMARY: 30 errors from 2 contexts (suppressed: 0 from 0)

1.3: Current test is story-step1 none.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind reported errors or memory leaks:
==734360== Memcheck, a memory error detector
==734360== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==734360== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==734360== Command: ./story-step1 none.txt
==734360== Parent PID: 734359
==734360== 
==734360== Invalid read of size 1
==734360==    at 0x484ED76: __strlen_sse2 (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==734360==    by 0x48E3A18: fputs (iofputs.c:33)
==734360==    by 0x109473: main (story-step1.c:15)
==734360==  Address 0x4a8f260 is 0 bytes after a block of size 0 alloc'd
==734360==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==734360==    by 0x1095CF: parsing (rand_story.c:36)
==734360==    by 0x109459: main (story-step1.c:14)
==734360== 
==734360== 
==734360== HEAP SUMMARY:
==734360==     in use at exit: 0 bytes in 0 blocks
==734360==   total heap usage: 3 allocs, 3 frees, 4,568 bytes allocated
==734360== 
==734360== All heap blocks were freed -- no leaks are possible
==734360== 
==734360== For lists of detected and suppressed errors, rerun with: -s
==734360== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

1.4: Current test is story-step1 
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 2
Checking that story-step2 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step2.c
gcc -o story-step2 story-step2.o rand_story.o provided.o
rm story-step2.o
The code compiled (good)
Executable story-step2 exists (good)
Now running YOUR tests for step 2

2.1: Current test is story-step2 words.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.2: Current test is story-step2 words1.txt
-----------------------------
You considered this a failure case:
There is special charcter in the word
But we did not.

2.3: Current test is story-step2 words2.txt
-----------------------------
You considered this a failure case:
Read word failure, word or catefory NULLBut we did not.

2.4: Current test is story-step2 words3.txt
-----------------------------
You considered this a failure case:
There is special charcter in the word
But we did not.

2.5: Current test is story-step2 words4.txt
-----------------------------
Your output looks good. Lets check valgrind
Valgrind was clean

2.6: Current test is story-step2 words5.txt
-----------------------------
You considered this a failure case:
There is special charcter in the word
But we did not.

2.7: Current test is story-step2 words.txt words.txt
-----------------------------
Great: we both considered this an error
Lets check if it valgrinds:
Valgrind was clean

Step 3
Checking that story-step3 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c rand_story.c
gcc -std=gnu99 -pedantic -Wall -Werror -ggdb3 -c story-step3.c
gcc -o story-step3 story-step3.o rand_story.o provided.o
rm story-step3.o
The code compiled (good)
Executable story-step3 exists (good)
Now running YOUR tests for step 3

3.1: Current test is story-step3 words.txt story2.txt
-----------------------------
You considered this a failure case:
Category 1 not found
But we did not.

Step 4
Checking that story-step4 compiles
rm -f *~ story-step1 story-step2 story-step3  story-step1.o story-step2.o story-step3.o rand_story.o
The code did not compile!

Overall Grade: NO GRADE YET
